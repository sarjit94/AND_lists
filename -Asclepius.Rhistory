pull(prodcodeid)
)) %>%
filter(!is.na(BNFChapter)) %>%
pull(BNFChapter) %>%
.[. != ""]
lshtm_2211 <-
cprd_gold %>%
filter(prodcode %in% as.list(
read_csv("Asthma/Rx Validation List/lshtm_2211_asthma_prodcodes_gold_jul19.txt") %>%
pull(prodcode)
)) %>%
pull(bnfchapter) %>%
str_split(., pattern = "/", simplify = TRUE) %>%
.[. != ""]
# CREATE A BNF CODE LIST --------------------------------------------------
# Create a overall BNF list to check against
# Keep only distinct BNF chapters
# Remove BNF chapter 00000000 (i.e. keep only BNF chapters >1)
# Remove BNF chapters starting with 11 (eye drops)
# Convert this to a vector and add leading zeros
bnf_list <-
data.frame(
bnf_chap = as.numeric(c(
lshtm_338,
lshtm_2210,
lshtm_2211))) %>%
distinct(bnf_chap) %>%
filter(bnf_chap >1) %>%
filter(!str_starts(bnf_chap, "11")) %>%
pull(bnf_chap) %>%
formatC(., width = 8, format = "d", flag = "0")
# Create a overall read list to check against
# Keep only distinct read codes
codelist_validation <- data.frame(
read = c(
bnf_list,
logesh
)) %>%
distinct(read) %>%
func_remove_subcodes("read") %>%
pull(read)
# CHECK CODELIST ----------------------------------------------------------
# Cross check the list imported against the biobank BNF code list
# Then filter out Read subcodes and pull out the remaining codes
# Then check if these codes don't exist in the codelist_checking vector
missing_codes <-
biobank_bnf_read %>%
filter(bnfcode_new %in% codelist_validation) %>%
func_remove_subcodes("readcode_new") %>%
pull(readcode_new) %>%
.[!(. %in% codelist_checking)]
missing_codes
# Decode missing codes
biobank_read_lookup %>%
filter(read_new %in% missing_codes) %>%
select(read_new, term_description) %>%
print(n=999)
#Count how many translated read V2 codes to expect back
missing_codes %>%
str_starts("X", negate=T) %>%
sum()
# Decode the codelist for checking
biobank_read_lookup %>%
filter(read_new %in% func_remove_subcodes2(codelist_checking)) %>%
select(read_new, term_description) %>%
print(n=999)
# IMPORT CHECKING LIST  ------------------------------------------------
# As importing, create new variables with periods removed (easier to work with)
codelist_checking <-
readxl::read_excel(
"Asthma/Asthma_2024.02.10 S2 file_read codes for drugs used in LTC definitions_medications.xlsx",
sheet = 2
) %>%
pull(readcode) %>%
str_remove_all(., "\\.")
# VALIDATION LISTS ------------------------------------------------------------
logesh <- read_csv("Asthma/Rx Validation List/Asthma Rx - Logesh.csv") %>%
pull(code) %>%
str_trunc(5, side="right", ellipsis="") %>%
str_remove_all("\\.")
lshtm_338 <- cprd_gold %>%
filter(prodcode %in% as.list(
readr::read_tsv("Asthma/Rx Validation List/lshtm_338_Asthma_therapy.txt") %>%
pull(prodcode)
)) %>%
pull(bnfchapter) %>%
str_split(., pattern = "/", simplify = TRUE) %>%
.[. != ""]
lshtm_2210 <- cprd_aurum %>%
filter(ProdCodeId %in% as.list(
read_csv("Asthma/Rx Validation List/lshtm_2210_asthma_prodcodes_aurum_mar20.txt") %>%
pull(prodcodeid)
)) %>%
filter(!is.na(BNFChapter)) %>%
pull(BNFChapter) %>%
.[. != ""]
lshtm_2211 <-
cprd_gold %>%
filter(prodcode %in% as.list(
read_csv("Asthma/Rx Validation List/lshtm_2211_asthma_prodcodes_gold_jul19.txt") %>%
pull(prodcode)
)) %>%
pull(bnfchapter) %>%
str_split(., pattern = "/", simplify = TRUE) %>%
.[. != ""]
# CREATE A BNF CODE LIST --------------------------------------------------
# Create a overall BNF list to check against
# Keep only distinct BNF chapters
# Remove BNF chapter 00000000 (i.e. keep only BNF chapters >1)
# Remove BNF chapters starting with 11 (eye drops)
# Convert this to a vector and add leading zeros
bnf_list <-
data.frame(
bnf_chap = as.numeric(c(
#lshtm_338,
lshtm_2210,
lshtm_2211))) %>%
distinct(bnf_chap) %>%
filter(bnf_chap >1) %>%
filter(!str_starts(bnf_chap, "11")) %>%
pull(bnf_chap) %>%
formatC(., width = 8, format = "d", flag = "0")
# Create a overall read list to check against
# Keep only distinct read codes
codelist_validation <- data.frame(
read = c(
bnf_list,
logesh
)) %>%
distinct(read) %>%
func_remove_subcodes("read") %>%
pull(read)
# CHECK CODELIST ----------------------------------------------------------
# Cross check the list imported against the biobank BNF code list
# Then filter out Read subcodes and pull out the remaining codes
# Then check if these codes don't exist in the codelist_checking vector
missing_codes <-
biobank_bnf_read %>%
filter(bnfcode_new %in% codelist_validation) %>%
func_remove_subcodes("readcode_new") %>%
pull(readcode_new) %>%
.[!(. %in% codelist_checking)]
missing_codes
# Decode missing codes
biobank_read_lookup %>%
filter(read_new %in% missing_codes) %>%
select(read_new, term_description) %>%
print(n=999)
#Count how many translated read V2 codes to expect back
missing_codes %>%
str_starts("X", negate=T) %>%
sum()
# Decode the codelist for checking
biobank_read_lookup %>%
filter(read_new %in% func_remove_subcodes2(codelist_checking)) %>%
select(read_new, term_description) %>%
print(n=999)
# IMPORT CHECKING LIST  ------------------------------------------------
# As importing, create new variables with periods removed (easier to work with)
codelist_checking <-
readxl::read_excel(
"Asthma/Asthma_2024.02.10 S2 file_read codes for drugs used in LTC definitions_medications.xlsx",
sheet = 2
) %>%
pull(readcode) %>%
str_remove_all(., "\\.")
# VALIDATION LISTS ------------------------------------------------------------
logesh <- read_csv("Asthma/Rx Validation List/Asthma Rx - Logesh.csv") %>%
pull(code) %>%
str_trunc(5, side="right", ellipsis="") %>%
str_remove_all("\\.")
lshtm_338 <- cprd_gold %>%
filter(prodcode %in% as.list(
readr::read_tsv("Asthma/Rx Validation List/lshtm_338_Asthma_therapy.txt") %>%
pull(prodcode)
)) %>%
pull(bnfchapter) %>%
str_split(., pattern = "/", simplify = TRUE) %>%
.[. != ""]
lshtm_2210 <- cprd_aurum %>%
filter(ProdCodeId %in% as.list(
read_csv("Asthma/Rx Validation List/lshtm_2210_asthma_prodcodes_aurum_mar20.txt") %>%
pull(prodcodeid)
)) %>%
filter(!is.na(BNFChapter)) %>%
pull(BNFChapter) %>%
.[. != ""]
lshtm_2211 <-
cprd_gold %>%
filter(prodcode %in% as.list(
read_csv("Asthma/Rx Validation List/lshtm_2211_asthma_prodcodes_gold_jul19.txt") %>%
pull(prodcode)
)) %>%
pull(bnfchapter) %>%
str_split(., pattern = "/", simplify = TRUE) %>%
.[. != ""]
# CREATE A BNF CODE LIST --------------------------------------------------
# Create a overall BNF list to check against
# Keep only distinct BNF chapters
# Remove BNF chapter 00000000 (i.e. keep only BNF chapters >1)
# Remove BNF chapters starting with 11 (eye drops)
# Convert this to a vector and add leading zeros
bnf_list <-
data.frame(
bnf_chap = as.numeric(c(
lshtm_338,
lshtm_2210,
lshtm_2211))) %>%
distinct(bnf_chap) %>%
filter(bnf_chap >1) %>%
filter(!str_starts(bnf_chap, "11")) %>%
pull(bnf_chap) %>%
formatC(., width = 8, format = "d", flag = "0")
# Create a overall read list to check against
# Keep only distinct read codes
codelist_validation <- data.frame(
read = c(
bnf_list,
logesh
)) %>%
distinct(read) %>%
func_remove_subcodes("read") %>%
pull(read)
# CHECK CODELIST ----------------------------------------------------------
# Cross check the list imported against the biobank BNF code list
# Then filter out Read subcodes and pull out the remaining codes
# Then check if these codes don't exist in the codelist_checking vector
missing_codes <-
biobank_bnf_read %>%
filter(bnfcode_new %in% codelist_validation) %>%
func_remove_subcodes("readcode_new") %>%
pull(readcode_new) %>%
.[!(. %in% codelist_checking)]
missing_codes
# Decode missing codes
biobank_read_lookup %>%
filter(read_new %in% missing_codes) %>%
select(read_new, term_description) %>%
print(n=999)
#Count how many translated read V2 codes to expect back
missing_codes %>%
str_starts("X", negate=T) %>%
sum()
# Decode the codelist for checking
biobank_read_lookup %>%
filter(read_new %in% func_remove_subcodes2(codelist_checking)) %>%
select(read_new, term_description) %>%
print(n=999)
biobank_read_lookup %>%
filter(read_new %in% missing_codes) %>%
select(read_new, term_description) %>%
print(n=999) %>% write.csv("file.csv")
find_subcodes <- function(higher_level_codes, all_codes) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- grep(paste0("^", code), all_codes, value = TRUE)
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes(missing_codes, biobankk_read_lookup$read_new)
# Return unique subcodes
unique(subcodes)
find_subcodes <- function(higher_level_codes, all_codes) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- grep(paste0("^", code), all_codes, value = TRUE)
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes(missing_codes, biobankk_read_lookup$read_new)
biobankk_read_lookup %>%
find_subcodes(missing_codes, read_new)
biobankk_read_lookup %>%
find_subcodes(missing_codes, .$read_new)
find_subcodes(missing_codes, biobankk_read_lookup$read_new)
find_subcodes <- function(higher_level_codes, all_codes_df) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- all_codes_df[grep(paste0("^", code), all_codes_df$code), "code"]
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes(missing_codes, biobankk_read_lookup$read_new)
find_subcodes(missing_codes, biobankk_read_lookup)
find_subcodes(missing_codes, biobankk_read_lookup)
find_subcodes(missing_codes, biobank_read_lookup)
find_subcodes(missing_codes, biobank_read_lookup$read_new)
find_subcodes(missing_codes, biobank_read_lookup$read_new)
find_subcodes <- function(higher_level_codes, all_codes) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- grep(paste0("^", code), all_codes, value = TRUE)
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes(missing_codes, biobank_read_lookup$read_new)
# Return unique subcodes
unique(subcodes)
find_subcodes <- function(higher_level_codes, all_codes) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- grep(paste0("^", code), all_codes, value = TRUE)
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes <- function(higher_level_codes, all_codes) {
subcodes <- character(0)  # Initialize an empty character vector to store subcodes
# Loop through each higher level code
for (code in higher_level_codes) {
# Find subcodes that start with the current higher level code
matching_subcodes <- grep(paste0("^", code), all_codes, value = TRUE)
subcodes <- c(subcodes, matching_subcodes)
}
# Return unique subcodes
unique(subcodes)
}
find_subcodes(missing_codes, biobank_read_lookup$read_new)
find_subcodes(missing_codes, biobank_read_lookup$read_new) %in% biobank_read_lookup$read_new
biobank_read_lookup %>%
filter(read_new %in% find_subcodes(missing_codes, biobank_read_lookup$read_new) ) %>%
select(read_new, term_description) %>%
print(n=999)
read_csv("Asthma Rx codes.xlsx")
readxl::read_excel("Asthma Rx codes.xlsx")
readxl::read_excel("Asthma Rx codes.xlsx") %>%
pull(read_new)
temp <- readxl::read_excel("Asthma Rx codes.xlsx") %>%
pull(read_new)
biobank_read_lookup %>%
filter(read_new %in% find_subcodes(temp, biobank_read_lookup$read_new) ) %>%
select(read_new, term_description) %>%
print(n=999)
write.csv("file.csv)
biobank_read_lookup %>%
filter(read_new %in% find_subcodes(temp, biobank_read_lookup$read_new) ) %>%
select(read_new, term_description) %>%
print(n=999) %>%
write.csv("file.csv")
biobank_read_lookup %>%
filter(read_new %in% find_subcodes(temp, biobank_read_lookup$read_new) ) %>%
select(read_new, term_description) %>%
print(n=999) %>%
write.csv("file.csv")
temp <- readxl::read_excel("Asthma Rx codes.xlsx") %>%
pull(read_new)
biobank_read_lookup %>%
filter(read_new %in% find_subcodes(temp, biobank_read_lookup$read_new) ) %>%
select(read_new, term_description) %>%
print(n=999) %>%
write.csv("file.csv")
library(tidyverse)
# LOAD LIBRARIES / SETUP R ----------------------------------------------------
rm(list=ls())
graphics.off()
library(tidyverse)
# CREATE FUNCTIONS ------------------------------------------------------------
# Create a function to remove subcodes (eg B22 if B2 exists in list)
func_remove_subcodes <- function(df, code_column) {
# Create a vector of unique codes
codes <- unique(df[[code_column]])
# Define a function to determine if a code is a subcode of any other
is_subcode <- function(code, codes) {
# Check if there are any codes that are a substring of the current code
any(sapply(codes, function(x) grepl(paste0("^", x), code) && x != code))
}
# Filter out subcodes
filtered_codes <- codes[!sapply(codes, is_subcode, codes = codes)]
# Filter the original dataframe to keep only rows with the filtered codes
df_filtered <- df %>%
filter(get(code_column) %in% filtered_codes)
return(df_filtered)
}
# Function to remove subcodes if higher level code exists
func_remove_subcodes2 <- function(codes) {
# Initialize an empty vector to store the final result
final_codes <- character(0)
# Sort the codes to ensure higher-level codes appear first
sorted_codes <- sort(codes)
# Loop through each code
for (code in sorted_codes) {
# Flag to check if a higher-level code exists
higher_level_exists <- FALSE
# Iterate through existing final codes
for (final_code in final_codes) {
# Check if the current code is a subcode of any existing code
if (startsWith(code, final_code)) {
# A higher-level code exists, set the flag and break the loop
higher_level_exists <- TRUE
break
}
}
# If no higher-level code exists, add the code to the final result
if (!higher_level_exists) {
final_codes <- c(final_codes, code)
}
}
return(final_codes)
}
# IMPORT COVNERSION DATABASES  ------------------------------------------------
# As importing, create new variables with periods removed (easier to work with)
# Import BioBank read conversion table
biobank_bnf_read <-
readxl::read_excel("Ref/BioBank/biobank.xlsx", sheet = "read_v2_drugs_bnf") %>%
mutate(
readcode_new = str_remove_all(read_code, "\\."),
bnfcode_new = str_remove_all(bnf_code, "\\."))
# Import BioBank OPCS conversion table
biobank_opcs_read <-
readxl::read_excel("Ref/BioBank/biobank.xlsx", sheet = "read_ctv3_opcs4") %>%
mutate(
readcode_new = str_remove_all(read_code, "\\."),
opcs4_new = str_remove_all(opcs4_code, "\\."))
# Import BioBank's read to drug name table
biobank_read_lookup <-
readxl::read_excel("Ref/BioBank/biobank.xlsx", sheet = "read_v2_drugs_lkp") %>%
mutate(read_new = str_remove_all(read_code, "\\."))
# Import the CPRD gold and aurum conversion tables
cprd_gold <- readr::read_tsv("Ref/CPRD/product.txt")
cprd_aurum <- readr::read_tsv("Ref/CPRD/CPRDAurumProduct.txt")
# Import SNOMED to read conversions
ndm_read_snomed <-
c(
"Ref/NHS Data Migration/Not Clinically Assured/rcmap_uk_20200401000001.txt",
"Ref/NHS Data Migration/Not Clinically Assured/rcsctmap_enhanced_uk_20200401000001.txt",
"Ref/NHS Data Migration/Not Clinically Assured/rcsctmap_uk_20200401000001.txt",
"Ref/NHS Data Migration/Not Clinically Assured/rctermsctmap_uk_20200401000001.txt"
) %>%
map_df( ~ read_tsv(.)) %>%
select(ReadCode, ConceptId) %>%
distinct(ConceptId, .keep_all = T) %>%
mutate(readcode_new = str_remove_all(ReadCode, "\\."))
# IMPORT CHECKING LIST  ------------------------------------------------
# As importing, create new variables with periods removed (easier to work with)
codelist_checking <- read_csv("Epilepsy/Epilepsy Rx 2024.02.11.csv", col_names = FALSE) %>%
pull(X1) %>%
str_remove_all(., "\\.")
# VALIDATION LISTS ------------------------------------------------------------
res_9 <- read_csv("Epilepsy/Rx Validation List/man9 - epilepsy_drugs.csv") %>%
pull(BNF_code)
res_55 <- read_csv("Epilepsy/Rx Validation List/res55-antiepileptic.csv") %>%
pull(code) %>%
str_remove_all(., "\\.")
# CREATE A BNF CODE LIST --------------------------------------------------
# Create a overall BNF list to check against
# Keep only distinct BNF chapters
# Remove BNF chapter 00000000 (i.e. keep only BNF chapters >1)
# Remove BNF chapters starting with 11 (eye drops)
# Convert this to a vector and add leading zeros
bnf_list <-
data.frame(
bnf_chap = as.numeric(c(
res_9))) %>%
distinct(bnf_chap) %>%
filter(bnf_chap >1) %>%
filter(!str_starts(bnf_chap, "11")) %>%
pull(bnf_chap) %>%
formatC(., width = 8, format = "d", flag = "0")
# Create a overall read list to check against
# Keep only distinct read codes
codelist_validation <- data.frame(
read = c(
bnf_list,
res_55
)) %>%
distinct(read) %>%
func_remove_subcodes("read") %>%
pull(read)
# CHECK CODELIST ----------------------------------------------------------
# Cross check the list imported against the biobank BNF code list
# Then filter out Read subcodes and pull out the remaining codes
# Then check if these codes don't exist in the codelist_checking vector
missing_codes <-
biobank_bnf_read %>%
filter(bnfcode_new %in% codelist_validation) %>%
func_remove_subcodes("readcode_new") %>%
pull(readcode_new) %>%
.[!(. %in% codelist_checking)]
missing_codes
# Decode missing codes
biobank_read_lookup %>%
filter(read_new %in% missing_codes) %>%
select(read_new, term_description) %>%
print(n=999)
#Count how many translated read V2 codes to expect back
missing_codes %>%
str_starts("X", negate=T) %>%
sum()
# Decode the codelist for checking
biobank_read_lookup %>%
filter(read_new %in% func_remove_subcodes2(codelist_checking)) %>%
select(read_new, term_description) %>%
print(n=999)
